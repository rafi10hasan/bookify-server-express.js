npm install multer multer-s3 aws-sdk

Basic Environment Variables (for AWS S3 or Linode Object Storage):

AWS_ACCESS_KEY_ID: Your cloud provider's access key.
AWS_SECRET_ACCESS_KEY: The secret key for authentication.
AWS_REGION: The region for the S3 bucket.
AWS_BUCKET_NAME: Your S3 bucket name.
For Linode Object Storage:
Set endpoint to https://<your-region>.linodeobjects.com.


// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyDPsrB3rfS0XvugJofOxLBQh7O_PnMTI2g",
  authDomain: "file-upload-4d7a1.firebaseapp.com",
  projectId: "file-upload-4d7a1",
  storageBucket: "file-upload-4d7a1.firebasestorage.app",
  messagingSenderId: "508730577117",
  appId: "1:508730577117:web:d2ec87b149ea63331acb34"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);



const AWS = require('aws-sdk');
const multer = require('multer');
const multerS3 = require('multer-s3');

// Initialize S3 client (adjust endpoint for Linode Object Storage)
const s3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION,
  endpoint: process.env.LINODE_OBJECT_STORAGE_ENDPOINT || undefined, // Add Linode endpoint if applicable
});


const upload = multer({
  storage: multerS3({
    s3: s3,
    bucket: process.env.AWS_BUCKET_NAME,
    acl: 'public-read', // Or 'private' based on your use case
    metadata: (req, file, cb) => {
      cb(null, { fieldName: file.fieldname });
    },
    key: (req, file, cb) => {
      const fileName = `${Date.now()}-${file.originalname}`;
      cb(null, fileName);
    },
  }),
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB size limit
  fileFilter: (req, file, cb) => {
    const allowedMimeTypes = ['image/jpeg', 'image/png', 'application/pdf'];
    if (allowedMimeTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('Invalid file type. Only JPEG, PNG, and PDF are allowed.'));
    }
  },
});


const express = require('express');
const router = express.Router();

router.post('/upload', upload.single('file'), (req, res) => {
  try {
    // File uploaded successfully
    res.status(200).json({
      message: 'File uploaded successfully',
      fileUrl: req.file.location, // S3 file URL
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;


Key Points for Optimization
Linode vs AWS S3:

Linode offers competitive pricing and uses the S3 API, so your integration code can be nearly identical.
Adjust the endpoint property for Linode Object Storage (https://<region>.linodeobjects.com).
Optimize Costs:

Use proper ACL policies (public-read or private) based on your needs.
Set up lifecycle rules in your bucket to delete or archive unused files.
Secure Uploads:

Validate file types using the fileFilter function in multer.
Restrict file sizes with the limits option in multer.
Error Handling:

Handle multer errors gracefully using multer.MulterError.
Provide feedback if files are too large or unsupported.
CDN for Performance:

Use a CDN (like CloudFront for AWS or Linodeâ€™s integrated CDN) to serve files for faster load times and reduced latency.
